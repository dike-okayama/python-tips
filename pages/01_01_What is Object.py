import streamlit as st

st.title('オブジェクトについて')

st.header('1. オブジェクトとは')
st.write('''\
Pythonのインタプリタで"Hello World"と出力したことがある人は多いでしょう
''')

st.code('''\
>>> 'Hello World'
'Hello World'
''')

st.write('''\
一見すると（echo コマンドのように）インタプリタが呼応して`'Hello World'`という文字列を返しているように見えますが，実際には`'Hello World'`という文字列型のオブジェクトを生成し，我々はそのオブジェクトの値を見ているのです．
''')

st.write('''\
Pythonでは、**全ての**要素がオブジェクトとして表現されます．上でみた文字列や整数，浮動小数点数，リスト，辞書，関数，クラス，例外，モジュールなどなど全てがオブジェクトです．
''')

st.write('''\
ところで，オブジェクトとは**値と型を持つ透明な箱**のようなものです．

我々は自由に箱の中身を覗くことができます．
''')

st.text('''\
---------------
|             |
|             |
|    value    |
|             |
| type        |
---------------
''')

st.write('''\
箱，つまりオブジェクトは通常リテラルを用いて生成します．
''')

st.code('''\
>>> 'Hello World'
'Hello World'
''')

st.text('''\
---------------
|             |
|             |
| Hello World |
|             |
| type: str   |
---------------
''')

st.code('''\
>>> 1991
1991
''')

st.text('''\
---------------
|             |
|             |
|    1991     |
|             |
| type: int   |
---------------
''')

st.markdown('---')

st.write('''
オブジェクトの型を確認するには，組み込み関数`type()`を利用してください．
''')

st.code('''\
>>> type('Hello World')
<class 'str'>
>>> type(1991)
<class 'int'>
>>> type(type)
<class 'type'>
''')

st.write('''\
また，組み込み関数`id()`はオブジェクトの識別子を返します．

''')

st.code('''
>>> id('Hello World')
4379060208
>>> id(1991)
4372760080
''')

st.write('''
識別子はオブジェクトに対して一意に割り当てられ，実行中は変更されることはありません．

さらに識別子はメモリ上でのオブジェクトの位置を表します．そのため[`ctypes.cast`](https://docs.python.org/3/library/ctypes.html#ctypes.cast)を利用して，直接取得したメモリアドレスへのアクセスすることも可能です．
''')

st.code('''\
>>> import ctypes
>>> obj = 'Hello World'
>>> ctypes.cast(id(obj), ctypes.py_object).value
'Hello World'
''')

st.info('''
Pythonでは直接的なメモリアクセスは推奨されません．
''')

# ----------------------------------------------------------------------------- #
st.header('2. 変数は箱ではない')

st.write('''\
私ははじめ変数に対して「値を格納する箱」のようなイメージを持っていましたが，Pythonの文脈においてこのイメージは不正確です．
''')

st.code('''\
>>> var = 1991
>>> var
1991
''')

st.text('''
(x)
----------------
|              |
|              |
|     1991     |
|              |
| name: var    |
----------------
''')

st.write('''\
まずPythonの代入文(assignment statement)では，以下で[`dis.dis`](https://docs.python.org/3/library/dis.html#dis.dis)の出力が示すとおり右辺が先に評価されます．
''')

st.code('''\
>>> import dis
>>> dis.dis('var = 1991')
    1           0 LOAD_CONST               0 (1991)
                2 STORE_NAME               0 (var)
                4 LOAD_CONST               1 (None)
                6 RETURN_VALUE
''')

st.caption('''
`dis.dis`はインタプリタがコードをどのように解釈・実行するかを示すバイトコードを出力します．
''')

st.write('''
加えて前述のとおり，オブジェクトが型と値をもつ透明な箱であることを踏まえると，実際には**変数は値を格納する箱ではなく，オブジェクトに紐づけられたタグ**であると捉えることができます．

以上を踏まえると，変数とオブジェクトは次のように考えるべきです．
''')

st.code('''\
>>> var = 1991
>>> var
1991
''')

st.text('''\
----------------
|              |
|              |
|     1991     |
|              |
| type: int    |-----[var]
----------------
''')

st.info('変数を値を格納する箱と考える言語も存在します．例えばC言語やJavaなどです．')

st.write('''
もう少し簡潔に表現すると，**変数はオブジェクトに対する参照**です．作ったオブジェクトがメモリの波に飲み込まれれる前に，変数を通してオブジェクトへの参照を保持することで，オブジェクトへアクセスすることができます．
''')

st.markdown('---')

st.write('''
前節で，オブジェクトが保存されているメモリアドレスへ直接アクセスする方法を紹介しました．
''')

st.code('''\
>>> import ctypes
>>> obj = 'Hello World'
>>> ctypes.cast(id(obj), ctypes.py_object).value
'Hello World'
''')

st.write('''\
上記の例ではobjという変数を利用してオブジェクトへの参照を保持していますが，以下のようにオブジェクトへの参照が保持されない，
つまりオブジェクトへ到達不可能になると，オブジェクトはガベージコレクトされます．

解放されたオブジェクトのメモリを参照しても期待される出力は得られません．
''')

st.code('''\
>>> import ctypes
>>> id('Hello World')
4379060208
>>> ctypes.cast(_, ctypes.py_object).value
b'e\x00\xa0\x01e\x02e\x00j\x03\xa1\x02j\x04F\x00d\x00S\x00'
''')

st.caption("""
`_`は直前の出力を参照する特殊変数です．ここでは，`id('Hello World')`の出力(4379060208)を参照しています．
""")

st.markdown('---')
# ----------------------------------------------------------------------------- #
st.header('3. オブジェクトの不変性')

st.write('''\
全てのオブジェクトは，その**型によって不変性が決まります**．特に変更可能であるものはミュータブル(mutable)，変更不可能であるものはイミュータブル(immutable)と呼ばれます．
''')

st.markdown('''\
代表的な組み込み型の不変性は次のように分類されます．

| 変更可能(ミュータブル) | 変更不可能(イミュータブル) |
| ---------------------- | -------------------------- |
|                        | bool                       |
|                        | int                        |
|                        | float                      |
| list                   | tuple                      |
| set                    | frosenset                  |
| dict                   |                            |
''')

st.write('\n')

st.write('''
箱の例を用いると，ミュータブルなオブジェクトは箱の蓋が空いており，反対にイミュータブルなオブジェクトは箱が閉じているような状態であると捉えることができます．
''')

st.code('''
>>> 1991
1991
>>> []
[]
''')

st.text('''
                         /
                        /
                       /
----------------      /           ----
|              |      |              |
|              |      |              |
|     1991     |      |      []      |
|              |      |              |
|              |      |              |
| type: int    |      | type: list   |
----------------      ----------------
''')
