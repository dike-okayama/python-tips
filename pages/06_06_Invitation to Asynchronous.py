import streamlit as st

st.title('非同期への招待')

st.write('''
JavaScript擁するWebページの世界では非同期処理は必須の存在です．しかし，私もそうですがPythonからプログラミングを学び始めた者にとっては感覚と乖離している部分が多く，なかなか非同期という存在に慣れることが難しいです．

公式ドキュメントでも抽象的な話が多く，非同期処理をいざ学ぼうとしてもかなり複雑に感じるかもしれません．

そのため本章ではまずは実際に動く具体的なコードからはじめ，そこから抽象的な概念を会得していくことにしましょう．
''')

st.header('0. 非同期を学ぶ前に')

st.write('''
とはいったものの，いくつか知っておいた方が良いことがあるので先に紹介します．
''')

st.subheader('0.1. イベントループ')

st.write('''
イベントループは，プログラムの制御フローを管理するための主要な機構で，特に非同期プログラミングやGUIアプリケーション，サーバーアプリケーションなどでよく使用されます．

イベントループの基本的な動作は次のとおりです：
''')

st.markdown('''
1. イベントまたはメッセージのキュー（待ち行列）を確認します
2. キューに何かがある場合，それを取り出して適切なイベントハンドラ（処理するためのコード）に渡します
3. イベントハンドラがイベントを処理します．処理が終わったら，再度キューを確認します
4. これを繰り返します．通常，プログラムが終了するか，明示的にループが停止されるまでイベントループは終わりません
''')
st.caption('イベントとは，ユーザからの入力や，ネットワークからのデータの到着などをイメージしてください')

st.write('''要するに，イベントループは，イベントが発生するまで待ち，イベントが発生したらそれを処理するということを繰り返すものです．''')

st.subheader('0.2. コールバック関数')
st.subheader('0.3. プロミス')
st.subheader('0.4. async/await')
st.subheader('0.5. コルーチン')

st.write('''
`async def`キーワードで定義される関数です．特にコルーチン関数を呼び出すと返ってくるオブジェクトをコルーチンオプジェクトといいます．
''')

st.info('ジェネレータを基盤とするコルーチンとは異なることに注意してください')

st.header('1. 非同期処理の基本')

st.write('''
非同期処理と呼ぶからには，対となる同期処理があるはずです．同期処理は我々が普段行っている処理で，一つの処理が終わるまで次の処理には移らないというものです．

実行に5秒かかる関数を2回呼び出すと，10秒かかります．
''')

st.code('''
>>> import time
>>> def func():
...    time.sleep(5)
...
>>> def main():
...     func()
...     func()
...
>>> start = time.time()
>>> main()
>>> end = time.time()
>>> print(end - start)
10.000000238418579
''')

st.write('''
では，上の処理を非同期で処理してみましょう．
''')

st.code('''
>>> import time
>>> async def func():
...    await asyncio.sleep(5)
...
>>> async def main():
...    await asyncio.gather(
...        func(),
...        func(),
...    )
...
>>> start = time.time()
>>> await main()
>>> end = time.time()
>>> print(end - start)
5.000000238418579
''')
